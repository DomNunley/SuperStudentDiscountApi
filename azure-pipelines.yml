# Docker
# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  releaseTag: '$(Build.BuildNumber)'
  serviceName: 'superstudentdiscountapi'
  ImageName: 'dnunley/$(serviceName)'
  DeploymentPath: '/home/ec2-user/deployments/$(serviceName)/$(releaseTag)'
  GitHubDeploymentPath: 'https://raw.githubusercontent.com/domnunley/$(serviceName)/master/deployment.yaml'
  DeploymentConfigPath: '/home/ec2-user/deployments/$(serviceName)/$(releaseTag)/deployment.yaml'

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        command: buildAndPush
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        containerRegistry: 'dockerhub'
        repository: '$(ImageName)'
        tags: |
          $(tag)
        
- stage: Deploy
  jobs:
    # track deployments on the environment
  - deployment: AWS
    pool:
      vmImage: 'ubuntu-latest'
    # creates an environment if it doesnâ€™t exist
    environment: '$(serviceName)'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
            - task: SSH@0
              displayName: 'Set up release artifacts'
              inputs:
                sshEndpoint: 'awshost'
                commands: |
                  mkdir -p $(DeploymentPath)
                  rm -f $(DeploymentPath)/*
                  chmod 775 $(DeploymentPath)
                  wget -q $(GitHubDeploymentPath) -P  $(DeploymentPath)
                  sed -i 's/{buildId}/$(Build.BuildId)/'  $(DeploymentConfigPath)
            - task: SSH@0
              displayName: 'Deploy new release'
              inputs:
                sshEndpoint: 'awshost'
                commands: 'k3s kubectl apply -f  $(DeploymentConfigPath)'
            - task: SSH@0
              displayName: 'Verify Release'
              inputs:
                sshEndpoint: 'awshost'
                commands: 'k3s kubectl rollout status deployment.v1.apps/$(serviceName)'

- stage: CallTestRunner
  displayName: Call Test Runner
  jobs:  
  - job: CallAPI
    displayName: Call TestRunner API
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: PowerShell@1
      displayName: 'PowerShell Script'
      inputs:
        scriptType: inlineScript
        inlineScript: |-
          # You can write your powershell scripts inline here.
          # You can also pass predefined and custom variables to this scripts using arguments
          $C = Invoke-RestMethod -Uri http://54.210.38.124/servicetest/api/superstudentdiscounttestrunner -TimeoutSec 10
          if ($C.hasAllTestRunsPass)
          {
              Write-Host "Test Passed"
              exit 0  
          }
          else
          {
              Write-Host "Test failed"
              exit -1
          }
              
